var searchIndex = {};
searchIndex['cmaes'] = {"items":[[0,"fitness","cmaes","",null,null],[8,"FitnessFunction","cmaes::fitness","",null,null],[10,"get_fitness","","",0,null],[0,"cmaes","cmaes","",null,null],[5,"cmaes_loop","cmaes::cmaes","Minimizes a function. Takes as an argument a type that implements the\nFitnessFunction trait and an instance of the CMAESOptions struct.\nReturns a solution with as small a fitness as possible.",null,{"inputs":[{"name":"t"},{"name":"cmaesoptions"}],"output":{"name":"vec"}}],[0,"options","cmaes","Option types for the CMA-ES algorithm",null,null],[3,"CMAESOptions","cmaes::options","A container for end conditions, problem dimension, and thread count.",null,null],[12,"end_conditions","","",1,null],[12,"dimension","","",1,null],[12,"threads","","",1,null],[4,"CMAESEndConditions","","An enum representing a condition under which to terminate the CMA-ES algorithm.",null,null],[13,"StableGenerations","","Terminate if best fitness changes by less than some amount for some amount of generations.\nUsage: StableGenerations(/* fitness */, /* generations */)",2,null],[13,"FitnessThreshold","","Terminate if best fitness is under some amount.\nUsage: FitnessThreshold(/* fitness */)",2,null],[13,"MaxGenerations","","Terminate after the generation count reaches a number.\nUsage: MaxGenerations(/* generations */)",2,null],[13,"MaxEvaluations","","Terminate after calling the fitness function some amount of times.\nUsage: MaxEvaluations(/* calls */)",2,null],[11,"clone","","",2,{"inputs":[{"name":"cmaesendconditions"}],"output":{"name":"cmaesendconditions"}}],[11,"clone","","",1,{"inputs":[{"name":"cmaesoptions"}],"output":{"name":"cmaesoptions"}}],[11,"default","","Returns a set of default options with the specified dimension (number of variables to\noptimize).",1,{"inputs":[{"name":"cmaesoptions"},{"name":"usize"}],"output":{"name":"cmaesoptions"}}],[11,"custom","","Returns a set of options with no end conditions.",1,{"inputs":[{"name":"cmaesoptions"},{"name":"usize"}],"output":{"name":"cmaesoptions"}}],[11,"threads","","Sets the number of threads to use in the algorithm.",1,{"inputs":[{"name":"cmaesoptions"},{"name":"usize"}],"output":{"name":"cmaesoptions"}}],[11,"stable_generations","","Sets the stable generation count. The algorithm terminates if the specified number of\ngenerations pass where the change in best fitness is under the specified amount.",1,{"inputs":[{"name":"cmaesoptions"},{"name":"f64"},{"name":"usize"}],"output":{"name":"cmaesoptions"}}],[11,"fitness_threshold","","Sets the minimum fitness. The algorithm terminates if the best fitness is under the\nthreshold.",1,{"inputs":[{"name":"cmaesoptions"},{"name":"f64"}],"output":{"name":"cmaesoptions"}}],[11,"max_generations","","Sets the maximum generation count. The algorithm terminates after the specified number of\ngenerations.",1,{"inputs":[{"name":"cmaesoptions"},{"name":"usize"}],"output":{"name":"cmaesoptions"}}],[11,"max_evaluations","","Sets the maximum evaluation count. The algorithm terminates after the specified number of\nfitness function calls.",1,{"inputs":[{"name":"cmaesoptions"},{"name":"usize"}],"output":{"name":"cmaesoptions"}}]],"paths":[[8,"FitnessFunction"],[3,"CMAESOptions"],[4,"CMAESEndConditions"]]};
initSearch(searchIndex);
